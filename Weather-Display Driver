/**
 * Custom Weather-Display Driver
 *
 *  Copyright 2018 @Matthew (Scottma61)
 *
 *  This driver was originally written by @Cobra who adapted it from @mattw01's work and I thank them for that!
 *  Heavily modified by myself: @Matthew (Scottma61) with lots of help from the Hubitat community.
 *
 *  This driver is intended to pull data from data files from a web server created by Weather-Display software
 *  (http://www.weather-display.com).  It will also suppliment forecast data from WeatherUnderground (WU).
 *  You will need your WU API key for this.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 *  Last Update 05/24/2018
 * { Left room below to document version changes...}
 *
 *  
 *  
 *  
 *  
 *  
 *  
 *  
 *  
 *  
 *  
 *  
 *  
 *  
 *  
 *  
 *  
 *  
 *  
 *  
 *  
 *  V1.0.0 - Original version 05/24/2018
 *
 */
metadata {
    definition (name: "Weather-Display Driver", namespace: "Matthew", author: "Scottma61") {
        capability "Actuator"
        capability "Sensor"
        capability "Temperature Measurement"
        capability "Illuminance Measurement"
        capability "Relative Humidity Measurement"
        
        command "pwsPoll"
        command "pwsForcePoll"
        command "wuPoll"
        command "wuForcePoll"
	
// Weather-Display sourced attributes        
        attribute "dewpoint", "number"
		attribute "pwsobservation_time", "string"
        attribute "wuobservation_time", "string"
        attribute "precip_1hr", "number"
        attribute "precip_today", "number"
		attribute "pressure", "number"
		attribute "weather", "string"
        attribute "weatherIcon", "string"
        attribute "wind_dir", "string"
        attribute "wind_gust", "string"
        attribute "wind", "number"
		attribute "city", "string"
		attribute "feelsLike", "number"	
        attribute "localSunset", "string"
		attribute "localSunrise", "string"
		attribute "moonPhase", "string"
        attribute "moonIllumination", "string"
		attribute "solarradiation", "number"		
        attribute "state", "string"
		attribute "UV", "number"
	
 // User specified attributes
		attribute "dateFormat", "string"
        attribute "driverNameSpace", "string"
		attribute "driverVersion", "string"
        attribute "distanceUnit", "string"
		attribute "pollsSinceReset", "number"	
        attribute "pressureUnit", "string"
        attribute "rainUnit", "string"
        attribute "summaryFormat", "string"
		attribute "temperatureUnit", "string"
        attribute "weatherSummary", "string"
        attribute "weatherSummaryFormat", "string"
    }
    preferences() {
        section("Query Inputs"){
        	input "tempFormat", "enum", required: true, title: "Display Unit - Temperature: Fahrenheit or Celsius",  options: ["Fahrenheit", "Celsius"]
		input "distanceFormat", "enum", required: true, title: "Display Unit - Distance/Speed: Miles or Kilometres",  options: ["Miles (mph)", "Kilometres (kph)"]
		input "pressureFormat", "enum", required: true, title: "Display Unit - Pressure: Inches or Millibar",  options: ["Inches", "Millibar"]
		input "rainFormat", "enum", required: true, title: "Display Unit - Precipitation: Inches or Millimetres",  options: ["Inches", "Millimetres"]
		input "summaryType", "bool", title: "Full Weather Summary", required: true, defaultValue: false
		input "iconType", "bool", title: "Icon: On = Current - Off = Forecast", required: true, defaultValue: false
		input "weatherFormat", "enum", required: true, title: "How to format weather summary",  options: ["Celsius, Miles & MPH", "Fahrenheit, Miles & MPH", "Celsius, Kilometres & KPH"]
/*	    
		input "pwspollLocation", "text", required: true, title: "PWS Data file location"
		input "pwspollIntervalLimit", "number", title: "Poll Interval Limit:", required: true, defaultValue: 1
		input "pwsautoPoll", "bool", required: false, title: "Enable Auto Poll for PWS", defaultValue: false
		input "pwspollInterval", "enum", title: "PWS Auto Poll Interval:", required: false, defaultValue: "5 Minutes", options: ["5 Minutes", "10 Minutes", "15 Minutes", "30 Minutes", "1 Hour", "3 Hours"]
		input "pwslogSet", "bool", title: "Log All PWS Response Data", required: true, defaultValue: false
		input "pwscutOff", "time", title: "PWS New Day Starts", required: true
*/	    
		input "wuapiKey", "text", required: true, title: "WU API Key"
		input "wupollLocation", "text", required: true, title: "ZIP Code or pws:WU_StationID"
		input "wupollIntervalLimit", "number", title: "WU Poll Interval Limit:", required: true, defaultValue: 1
		input "wuautoPoll", "bool", required: false, title: "Enable Auto Poll for WU", defaultValue: false
		input "wupollInterval", "enum", title: "WU Auto Poll Interval:", required: false, defaultValue: "5 Minutes", options: ["5 Minutes", "10 Minutes", "15 Minutes", "30 Minutes", "1 Hour", "3 Hours"]
		input "wulogSet", "bool", title: "Log All WU Response Data", required: true, defaultValue: false
		input "wucutOff", "time", title: "WU New Day Starts", required: true
       }
    }
}
/*
// Poll PWS
def pwsupdated() {
    log.debug "PWS update called"
    state.version = "1.0.0"    // ************************* Update as required *************************************
    unschedule()
    state.pwsNumOfPolls = 0
    pwsForcePoll()
    def pwspollIntervalCmd = (settings?.pwspollInterval ?: "5 Minutes").replace(" ", "")
    if(pwsautoPoll)
        "runEvery${pwspollIntervalCmd}"(pwspollSchedule)
    def pwschangeOver = pwscutOff
    schedule(pwschangeOver, pwsResetPollCount)
}

def pwsResetPollCount(){
	state.pwsNumOfPolls = -1
    	log.info "PWS Poll counter reset.."
	pwsForcePoll()
}

def pwspollSchedule(){
    	pwsForcePoll()
}
              
def parse(String description) {
}

def pwsPoll(){
    	if(now() - state.pwslastPoll > (pwspollIntervalLimit * 60000))
        	pwsForcePoll()
    	else
        	log.debug "PWS Poll called before interval threshold was reached"
}

def pwsForcePoll(){
    if(state.pwsNumOfPolls == null) {
        state.pwsNumOfPolls = 0
    }
	state.pwsNumOfPolls = (state.pwsNumOfPolls) + 1
	log.info " state.pwsNumOfPolls = $state.pwsNumOfPolls" 
    log.debug "PWS: ForcePoll called"
    def WeatherSummeryFormat = weatherFormat
	sendEvent(name: "pwspollsSinceReset", value: state.pwsNumOfPolls, isStateChange: true)
	sendEvent(name: "driverNameSpace", value: "Matthew", isStateChange: true)
	sendEvent(name: "driverVersion", value: state.version, isStateChange: true)
	
/*	def params1 = [
		uri: "${pwspollLocation}/everything.php"
//        uri: "${pwspollLocation}/everything.json"
    	]
    	def params2 = [
        	uri: "http://api.wunderground.com/api/${wuapiKey}/alerts/astronomy/conditions/forecast/q/${wupollLocation}.json"
    	] 
    	try {
        	httpGet(params1) { resp1 ->
	            	resp1.headers.each {
        	    	log.debug "Response1: ${it.name} : ${it.value}"
        			}
					if(logSet == true){  
						log.debug "params1: ${params1}"
						log.debug "response contentType: ${resp1.contentType}"
						log.debug "response data: ${resp1.data}"
					} 
					if(logSet == false){ 
						log.info "Further PWS detailed data logging disabled"
					}
// Start Weather-Display data poll		
//		if(sourcecity){
			sendEvent(name: "city", value: resp1.data.station.name.split(/ /)[0], isStateChange: true)
//		}
//        if(sourcefeelsLike){
            sendEvent(name: "weatherIcon", value: resp1.data.everything.weather.apparent_temperature.current.f, isStateChange: true)
//        }
//		if(sourceicon){
			sendEvent(name: "weatherIcon", value: resp1.data.everything.forecast.icon.code, isStateChange: true)
//		}
//		if(sourcelocalSunset){
			sendEvent(name: "localSunset", value: resp1.data.everything.astronomy.sun.sunset_time.hour + ":" + resp1.data.everything.astronomy.sun.sunset_time.minute, descriptionText: "Sunset today at is $localSunset", isStateChange: true)
//		}
//		if(sourcelocalSunrise){
			sendEvent(name: "localSunrise", value: resp1.data.everything.astronomy.sun.sunrise_time.hour + ":" + resp1.data.everything.astronomy.sun.sunrise_time.minute, descriptionText: "Sunrise today is at $localSunrise", isStateChange: true)
//		}
//		if(sourcemoonPhase){
			sendEvent(name: "moonAge", value: resp1.data.everything.astronomy.moon.moon_age.toDouble(), isStateChange: true)
			if (resp1.data.everything.astronomy.moon.moon_age.toDouble() >= 0 && resp1.data.everything.astronomy.moon.moon_age.toDouble() < 4) {sendEvent(name: "moonPhase", value: "New Moon", isStateChange: true)}
			if (resp1.data.everything.astronomy.moon.moon_age.toDouble() >= 4 && resp1.data.everything.astronomy.moon.moon_age.toDouble() < 7) {sendEvent(name: "moonPhase", value: "Waxing Crescent", isStateChange: true)}
			if (resp1.data.everything.astronomy.moon.moon_age.toDouble() >= 7 && resp1.data.everything.astronomy.moon.moon_age.toDouble() < 10) {sendEvent(name: "moonPhase", value: "First Quarter", isStateChange: true)}
			if (resp1.data.everything.astronomy.moon.moon_age.toDouble() >= 10 && resp1.data.everything.astronomy.moon.moon_age.toDouble() < 14) {sendEvent(name: "moonPhase", value: "Waxing Gibbous", isStateChange: true)}
			if (resp1.data.everything.astronomy.moon.moon_age.toDouble() >= 14 && resp1.data.everything.astronomy.moon.moon_age.toDouble() < 18) {sendEvent(name: "moonPhase", value: "Full Moon", isStateChange: true)}
			if (resp1.data.everything.astronomy.moon.moon_age.toDouble() >= 18 && resp1.data.everything.astronomy.moon.moon_age.toDouble() < 22) {sendEvent(name: "moonPhase", value: "Waning Gibbous", isStateChange: true)}
			if (resp1.data.everything.astronomy.moon.moon_age.toDouble() >= 22 && resp1.data.everything.astronomy.moon.moon_age.toDouble() < 26) {sendEvent(name: "moonPhase", value: "Last Quarter", isStateChange: true)}
			if (resp1.data.everything.astronomy.moon.moon_age.toDouble() >= 26) {sendEvent(name: "moonPhase", value: "Waxing Gibbous", isStateChange: true)}
//		}
//		if(sourcemoonIllumination){
			sendEvent(name: "moonIllumination", value: resp1.data.everything.astronomy.moon.moon_phase + "%", isStateChange: true)
//		}
//		if(sourcesolarradiation){
			def illume = (resp1.data.everything.weather.solar.irradiance.wm2)
			if(illume){
				 sendEvent(name: "illuminance", value: resp1.data.everything.weather.solar.irradiance.wm2, unit: "lux", isStateChange: true)
				 sendEvent(name: "solarradiation", value: resp1.data.everything.weather.solar.irradiance.wm2, unit: "wm2", isStateChange: true)
			}
			if(!illume){
				sendEvent(name: "illuminance", value: "This station does not send Illumination data", isStateChange: true)
			 	sendEvent(name: "solarradiation", value: "This station does not send Solar Radiation data", isStateChange: true)
			}   
//		}
//		if(sourcestate){
			sendEvent(name: "state", value: resp1.data.station.name.split(/ /)[1], isStateChange: true)
//		}
//		if(sourceUV){
			sendEvent(name: "UV", value: resp1.data.everything.weather.uv.uvi, isStateChange: true)
//		}
		sendEvent(name: "weather", value: resp1.data.everything.forecast.davis_forecast, isStateChange: true)
		sendEvent(name: "humidity", value: resp1.data.everything.weather.humidity.current, isStateChange: true)
//		if(iconType == true){ 
		   sendEvent(name: "weatherIcon", value: resp1.data.everything.forecast.icon.code, isStateChange: true)
//		}    
		sendEvent(name: "observation_time", value: resp1.data.time.time + " " + Date.parse("d/M/yyyy", resp1.data.time.date).format('M/d/yyyy'), isStateChange: true)
		sendEvent(name: "wind_dir", value: resp1.data.everything.weather.wind.direction.cardinal, isStateChange: true)
		if(rainFormat == "Inches"){
			sendEvent(name: "precip_today", value: resp1.data.everything.weather.rainfall.daily.in, unit: "IN", isStateChange: true)
			sendEvent(name: "rainUnit", value: "Inches", isStateChange: true)
		}
		if(rainFormat == "Millimetres"){   
			sendEvent(name: "precip_today", value: resp1.everything.weather.data.rainfall.daily.mm, unit: "MM", isStateChange: true)
			sendEvent(name: "rainUnit", value: "Millimetres", isStateChange: true)
		}
		if(tempFormat == "Celsius"){
			sendEvent(name: "dewpoint", value: resp1.data.everything.weather.dew_point.current.c, unit: "C", isStateChange: true)
			sendEvent(name: "temperatureUnit", value: "Celsius", isStateChange: true)
			sendEvent(name: "temperature", value: resp1.data.everything.weather.temperature.current.c, unit: "C", isStateChange: true)   	
		}
		if(tempFormat == "Fahrenheit"){ 
			sendEvent(name: "dewpoint", value: resp1.data.everything.weather.dew_point.current.f, unit: "F", isStateChange: true)
			sendEvent(name: "temperatureUnit", value: "Fahrenheit", isStateChange: true)
			sendEvent(name: "temperature", value: resp1.data.everything.weather.temperature.current.f, unit: "F", isStateChange: true)    	
		}  
	   	if(distanceFormat == "Miles (mph)"){  
			sendEvent(name: "wind", value: resp1.data.everything.weather.wind.avg_speed.mph, unit: "MPH", isStateChange: true)
	   		sendEvent(name: "wind_gust", value: resp1.data.everything.weather.wind.max_gust_speed.mph, isStateChange: true) 
	   		sendEvent(name: "distanceUnit", value: "Miles (mph)", isStateChange: true)
	   	}  
	   	if(distanceFormat == "Kilometres (kph)"){
			sendEvent(name: "wind", value: resp1.data.everything.weather.wind.max_gust_speed.kmh, unit: "KPH", isStateChange: true)  
			sendEvent(name: "wind_gust", value: resp1.data.everything.weather.wind.max_gust_speed.kmh, isStateChange: true) 
			sendEvent(name: "distanceUnit", value: "Kilometres (kph)", isStateChange: true)  
	   	}		  
	   	if(pressureFormat == "Inches"){
			sendEvent(name: "pressure", value: resp1.data.everything.weather.pressure.current.inhg, unit: "inhg", isStateChange: true)
			sendEvent(name: "pressureUnit", value: "Inches")  
	   	}
		if(pressureFormat == "Millibar"){
			sendEvent(name: "pressure", value: resp1.data.everything.weather.pressure.current.mb, unit: "mb", isStateChange: true)
		   	sendEvent(name: "pressureUnit", value: "Millibar", isStateChange: true) 
	   	}
// end WD data poll		
  WeatherUnderground data elements                
        	httpGet(params2) { resp2 ->
	            	resp2.headers.each {
        	    	log.debug "Response2: ${it.name} : ${it.value}"
			}
			if(wulogSet == true){  
			    log.debug "params2: ${params2}"
			    log.debug "response contentType: ${resp2.contentType}"
			    log.debug "response data: ${resp2.data}"
			} 
			if(wulogSet == false){ 
				log.info "Further WU detailed data logging disabled"
			}
		if(!sourcecity){
			sendEvent(name: "city", value: resp2.data.current_observation.display_location.city, isStateChange: true)
		}
		if(!sourceicon){
			if(iconType == false){   
                   		sendEvent(name: "weatherIcon", value: resp2.data.forecast.simpleforecast.forecastday[0].icon, isStateChange: true)
                	}
                	if(iconType == true){ 
			       sendEvent(name: "weatherIcon", value: resp2.data.current_observation.icon, isStateChange: true)
                	}
		}
		if(!sourcelocalSunset){
			sendEvent(name: "localSunset", value: resp2.data.sun_phase.sunset.hour + ":" + resp2.data.sun_phase.sunset.minute, descriptionText: "Sunset today at is $localSunset", isStateChange: true)
		}
		if(!sourcelocalSunrise){
			sendEvent(name: "localSunrise", value: resp2.data.sun_phase.sunrise.hour + ":" + resp2.data.sun_phase.sunrise.minute, descriptionText: "Sunrise today is at $localSunrise", isStateChange: true)
		}
		if(!sourcemoonPhase){
			sendEvent(name: "moonPhase", value: resp2.data.moon_phase.phaseofMoon , isStateChange: true)
		}
		if(!sourcemoonIllumination){
			sendEvent(name: "moonIllumination", value: resp2.data.moon_phase.percentIlluminated  + "%" , isStateChange: true)
		}
		if(!sourcesolarradiation){
			def illume = (resp2.data.current_observation.solarradiation)
        		if(illume){
            	 		sendEvent(name: "illuminance", value: resp2.data.current_observation.solarradiation, unit: "lux", isStateChange: true)
                 		sendEvent(name: "solarradiation", value: resp2.data.current_observation.solarradiation, unit: "W", isStateChange: true)
            		}
            		if(!illume){
                 		sendEvent(name: "illuminance", value: "This station does not send Illumination data", isStateChange: true)
            	 		sendEvent(name: "solarradiation", value: "This station does not send Solar Radiation data", isStateChange: true)
            		}
		}
		if(!sourcestate){
			sendEvent(name: "state", value: resp2.data.current_observation.display_location.state, isStateChange: true)
		}
		if(!sourceUV){
			sendEvent(name: "UV", value: resp2.data.current_observation.UV, isStateChange: true)
		}
		sendEvent(name: "stationID", value: resp2.data.station.name, isStateChange: true)
	        sendEvent(name: "chanceOfRain", value: resp2.data.forecast.simpleforecast.forecastday[0].pop + "%", isStateChange: true)
		sendEvent(name: "percentPrecip", value: resp2.data.forecast.simpleforecast.forecastday[0].pop , isStateChange: true)
		sendEvent(name: "wind_string", value: resp2.data.current_observation.wind_string)
		sendEvent(name: "forecastConditions", value: resp2.data.forecast.simpleforecast.forecastday[0].conditions, isStateChange: true)            
		if(rainFormat == "Inches"){
			sendEvent(name: "precip_1hr", value: resp2.data.current_observation.precip_1hr_in, unit: "IN", isStateChange: true)
			sendEvent(name: "rainTomorrow", value: resp2.data.forecast.simpleforecast.forecastday[1].qpf_allday.in, unit: "IN", isStateChange: true)
			sendEvent(name: "rainDayAfterTomorrow", value: resp2.data.forecast.simpleforecast.forecastday[2].qpf_allday.in, unit: "IN", isStateChange: true)
		}
		if(rainFormat == "Millimetres"){   
			sendEvent(name: "precip_1hr", value: resp2.data.current_observation.precip_1hr_metric, unit: "MM", isStateChange: true)
			sendEvent(name: "rainTomorrow", value: resp2.data.forecast.simpleforecast.forecastday[1].qpf_allday.mm, unit: "MM", isStateChange: true)
			sendEvent(name: "rainDayAfterTomorrow", value: resp2.data.forecast.simpleforecast.forecastday[2].qpf_allday.mm, unit: "MM", isStateChange: true)
		}		
		sendEvent(name: "WUobservation_time", value: resp2.data.current_observation.observation_time, isStateChange: true)
	   	sendEvent(name: "forecastConditions", value: resp2.data.forecast.simpleforecast.forecastday[0].conditions, isStateChange: true)
	   	sendEvent(name: "chanceOfRain", value: resp2.data.forecast.simpleforecast.forecastday[0].pop + "%", isStateChange: true)
	   	sendEvent(name: "percentPrecip", value: resp2.data.forecast.simpleforecast.forecastday[0].pop , isStateChange: true)
//       		sendEvent(name: "weather", value: resp2.data.current_observation.weather, isStateChange: true)
	   	if(tempFormat == "Fahrenheit"){ 
			if(!sourcefeelsLike){
				sendEvent(name: "feelsLike", value: resp2.data.current_observation.feelslike_f, unit: "F", isStateChange: true)
			{
			sendEvent(name: "forecastHigh", value: resp2.data.forecast.simpleforecast.forecastday[0].high.fahrenheit, unit: "F", isStateChange: true)
			sendEvent(name: "forecastLow", value: resp2.data.forecast.simpleforecast.forecastday[0].low.fahrenheit, unit: "F", isStateChange: true)
		}
		if(tempFormat == "Celsius"){
			if(!sourcefeelsLike){
				sendEvent(name: "feelsLike", value: resp2.data.current_observation.feelslike_c, unit: "C", isStateChange: true)
			{
			sendEvent(name: "forecastHigh", value: resp2.data.forecast.simpleforecast.forecastday[0].high.celsius, unit: "C", isStateChange: true)
			sendEvent(name: "forecastLow", value: resp2.data.forecast.simpleforecast.forecastday[0].low.celsius, unit: "C", isStateChange: true)
		}
		if(distanceFormat == "Miles (mph)"){  
			sendEvent(name: "visibility", value: resp2.data.current_observation.visibility_mi, unit: "mi", isStateChange: true)
		}
		if(distanceFormat == "Kilometres (kph)"){
			sendEvent(name: "visibility", value: resp2.data.current_observation.visibility_km, unit: "km", isStateChange: true)
		}
          
		if(summaryType == true){
			if (WeatherSummeryFormat == "Celsius, Miles & MPH"){
		   		sendEvent(name: "weatherSummaryFormat", value: "Celsius, Miles & MPH", isStateChange: true)
				sendEvent(name: "weatherSummary", value: "Weather summary for" + " " + resp1.data.station.name.split(/ /)[0] + ", " + resp1.data.station.name.split(/ /)[1] + " at " + resp1.data.time.time + " " + Date.parse("d/M/yyyy", resp1.data.time.date).format('M/d/yyyy') + ". "  
				+ resp2.data.forecast.simpleforecast.forecastday[0].conditions + " with a high of " + resp2.data.forecast.simpleforecast.forecastday[0].high.celsius + " degrees, " + "and a low of " 
				+ resp2.data.forecast.simpleforecast.forecastday[0].low.celsius  + " degrees. " + "Humidity is currently around " + resp1.data.everything.weather.humidity.current + "% and temperature is " 
				+ resp1.data.everything.weather.temperature.current.c + " degrees. " + " The temperature feels like it's " + resp2.data.current_observation.feelslike_c + " degrees. " 
				+ "Wind is from the " + resp1.data.everything.weather.wind.direction.cardinal
				+ " at " + resp1.data.everything.weather.wind.avg_speed.mph + " mph" + ", with gusts up to: " + resp1.data.everything.weather.wind.max_gust_speed.mph + " mph" + ". Visibility is around " 
				+ resp2.data.current_observation.visibility_mi + " miles" + ". " + "There is a "+resp2.data.forecast.simpleforecast.forecastday[0].pop + "% chance of rain today." , isStateChange: true
				)  
			}
			if (WeatherSummeryFormat == "Fahrenheit, Miles & MPH"){
				sendEvent(name: "weatherSummaryFormat", value: "Fahrenheit, Miles & MPH", isStateChange: true)
				sendEvent(name: "weatherSummary", value: "Weather summary for" + " " + resp1.data.station.name.split(/ /)[0] + ", " + resp1.data.station.name.split(/ /)[1] + " at " + resp1.data.time.time + " " + Date.parse("d/M/yyyy", resp1.data.time.date).format('M/d/yyyy') + ". "  
				+ resp2.data.forecast.simpleforecast.forecastday[0].conditions + " with a high of " + resp2.data.forecast.simpleforecast.forecastday[0].high.fahrenheit + " degrees, " + "and a low of " 
				+ resp2.data.forecast.simpleforecast.forecastday[0].low.fahrenheit  + " degrees. " + "Humidity is currently around " + resp1.data.everything.weather.humidity.current + "% and temperature is " 
				+ resp1.data.everything.weather.temperature.current.f + " degrees. " + " The temperature feels like it's " + resp2.data.current_observation.feelslike_f + " degrees. " 
				+ "Wind is from the " + resp1.data.everything.weather.wind.direction.cardinal
				+ " at " + resp1.data.everything.weather.wind.avg_speed.mph + " mph" + ", with gusts up to: " + resp1.data.everything.weather.wind.max_gust_speed.mph + " mph" + ". Visibility is around " 
				+ resp2.data.current_observation.visibility_mi + " miles" + ". " + "There is a "+resp2.data.forecast.simpleforecast.forecastday[0].pop + "% chance of rain today." , isStateChange: true
				)  
			}   
			 if (WeatherSummeryFormat == "Celsius, Kilometres & KPH"){
				sendEvent(name: "weatherSummaryFormat", value: "Celsius, Kilometres & KPH", isStateChange: true)
				sendEvent(name: "weatherSummary", value: "Weather summary for" + " " + resp1.data.station.name.split(/ /)[0] + ", " + resp1.data.station.name.split(/ /)[1] + " at " + resp1.data.time.time + " " + Date.parse("d/M/yyyy", resp1.data.time.date).format('M/d/yyyy') + ". "  
				+ resp2.data.forecast.simpleforecast.forecastday[0].conditions + " with a high of " + resp2.data.forecast.simpleforecast.forecastday[0].high.celsius + " degrees, " + "and a low of " 
				+ resp2.data.forecast.simpleforecast.forecastday[0].low.celsius  + " degrees. " + "Humidity is currently around " + resp1.data.everything.weather.humidity.current + "% and temperature is " 
				+ resp1.data.everything.weather.temperature.current.c + " degrees. " + " The temperature feels like it's " + resp2.data.current_observation.feelslike_c + " degrees. " 
				+ "Wind is from the " + resp1.data.everything.weather.wind.direction.cardinal
				+ " at " + resp1.data.everything.weather.wind.avg_speed.kmh + " kph" + ", with gusts up to: " + resp1.data.everything.weather.wind.max_gust_speed.kmh + " kph" + ". Visibility is around " 
				+ resp2.data.current_observation.visibility_mi + " miles" + ". " + "There is a "+resp2.data.forecast.simpleforecast.forecastday[0].pop + "% chance of rain today." , isStateChange: true
				)  
			}                
		}    
		if(summaryType == false){
			if (WeatherSummeryFormat == "Celsius, Miles & MPH"){
		 		sendEvent(name: "weatherSummaryFormat", value: "Celsius, Miles & MPH", isStateChange: true)
				sendEvent(name: "weatherSummary", value: resp1.data.everything.forecast.davis_forecast + ". " + " Today's High:" + resp1.data.everything.weather.temperature.current.high.c + ", Today's Low:" 
				+ resp1.data.everything.weather.tempurature.current.low.c  +  ". Humidity: " + resp1.data.everything.weather.current.humidity + "% Temperature: " 
				+ resp1.data.everything.weather.tempurature.current.c  + ". Wind Direction: " + resp1.data.everything.weather.wind.direction.cardinal + ". Wind Speed: " + resp1.data.everything.weather.avg_speed.mph + " mph" 
				+ ", Gust: " + resp1.data.everything.weather.max_gust_speed.mph + " mph.  Rain: "  +resp2.data.forecast.simpleforecast.forecastday[0].pop + "%" , isStateChange: true
				)  
			}
			if (WeatherSummeryFormat == "Fahrenheit, Miles & MPH"){
				sendEvent(name: "weatherSummaryFormat", value: "Fahrenheit, Miles & MPH", isStateChange: true)
				sendEvent(name: "weatherSummary", value: resp1.data.everything.forecast.davis_forecast + ". " + " Today's High:" + resp1.data.everything.weather.temperature.current.high.f + ", Today's Low:" 
				+ resp1.data.everything.weather.tempurature.current.low.f  +  ". Humidity: " + resp1.data.everything.weather.current.humidity + "% Temperature: " 
				+ resp1.data.everything.weather.tempurature.current.f  + ". Wind Direction: " + resp1.data.everything.weather.wind.direction.cardinal + ". Wind Speed: " + resp1.data.everything.weather.avg_speed.mph + " mph" 
				+ ", Gust: " + resp1.data.everything.weather.max_gust_speed.mph + " mph. Rain: "  +resp1.data.forecast.simpleforecast.forecastday[0].pop + "%" , isStateChange: true
				)  
			}
			 if (WeatherSummeryFormat ==  "Celsius, Kilometres & KPH"){
				sendEvent(name: "weatherSummaryFormat", value:  "Celsius, Kilometres & KPH", isStateChange: true)
				sendEvent(name: "weatherSummary", value: resp1.data.everything.forecast.davis_forecast + ". " + " Today's High:" + resp1.data.everything.weather.temperature.current.high.c + ", Today's Low:" 
				+ resp1.data.everything.weather.tempurature.current.low.c  +  ". Humidity: " + resp1.data.everything.weather.current.humidity + "% Temperature: " 
				+ resp1.data.everything.weather.tempurature.current.c  + ". Wind Direction: " + resp1.data.everything.weather.wind.direction.cardinal + ". Wind Speed: " + resp1.data.everything.weather.avg_speed.kmh + " kph" 
				+ ", Gust: " + resp1.data.everything.weather.max_gust_speed.kmh + " kph.  Rain: "  +resp1.data.forecast.simpleforecast.forecastday[0].pop + "%", isStateChange: true
				)  
			}
		}                     
            	sendEvent(name: "WUobservation_time", value: resp2.data.current_observation.observation_time, isStateChange: true)
//            	sendEvent(name: "weather", value: resp2.data.current_observation.weather, isStateChange: true)
	    	sendEvent(name: "wind_string", value: resp2.data.current_observation.wind_string)
	       	sendEvent(name: "forecastConditions", value: resp2.data.forecast.simpleforecast.forecastday[0].conditions, isStateChange: true)                        
   
             	def possAlert = (resp2.data.alerts.description)
		if (possAlert){
               		sendEvent(name: "alert", value: resp2.data.alerts.description, isStateChange: true)  
               	}
                if (!possAlert){
               		sendEvent(name: "alert", value: " No current weather alerts for this area")
                }
          	state.wulastPoll = now()     
        
        } 
	}
    catch (e) {
        log.error "something went wrong: $e"
    }
}
def Report(){
  def pwsobvTime = pwsobservation_time.value
  log.info "PWS last updated: $pwsobvTime"
  def wuobvTime = wuobservation_time.value
  log.info "WU last updated: $wuobvTime"  
}
*/
//***********************************************************************************************************************//
def wuupdated() {
    log.debug "WU update called"
    unschedule()
    state.wuNumOfPolls = 0
    wuForcePoll()
    def wupollIntervalCmd = (settings?.wupollInterval ?: "5 Minutes").replace(" ", "")
    if(wuautoPoll)
        "runEvery${wupollIntervalCmd}"(wupollSchedule)
    def wuchangeOver = wucutOff
    schedule(wuchangeOver, wuResetPollCount)
}

def wuResetPollCount(){
	state.wuNumOfPolls = -1
    	log.info "PWS Poll counter reset.."
	wuForcePoll()
}

def wupollSchedule(){
    	wuForcePoll()
}
              
def parse(String description) {
}

def wuPoll(){
    	if(now() - state.wulastPoll > (wupollIntervalLimit * 60000))
        	wuForcePoll()
    	else
        	log.debug "WU Poll called before interval threshold was reached"
}

def wuForcePoll(){
    if(state.wuNumOfPolls == null) {
        state.wuNumOfPolls = 0
    }
	state.wuNumOfPolls = (state.wuNumOfPolls) + 1
	log.info " state.wuNumOfPolls = $state.wuNumOfPolls" 
    log.debug "WU: ForcePoll called"
	sendEvent(name: "wupollsSinceReset", value: state.wuNumOfPolls, isStateChange: true)	
    	def params2 = [
        	uri: "http://api.wunderground.com/api/${wuapiKey}/alerts/astronomy/conditions/forecast/q/${wupollLocation}.json"
    	] 
    	try {
//  WeatherUnderground data elements                
        	httpGet(params2) { resp2 ->
	            	resp2.headers.each {
        	    	log.debug "Response2: ${it.name} : ${it.value}"
			}
			if(wulogSet == true){  
			    log.debug "params2: ${params2}"
			    log.debug "response contentType: ${resp2.contentType}"
			    log.debug "response data: ${resp2.data}"
			} 
			if(wulogSet == false){ 
				log.info "Further WU detailed data logging disabled"
			}
//		if(!sourcecity){
			sendEvent(name: "city", value: resp2.data.current_observation.display_location.city, isStateChange: true)
//		}
/*		if(!sourceicon){
			if(iconType == false){   
                   		sendEvent(name: "weatherIcon", value: resp2.data.forecast.simpleforecast.forecastday[0].icon, isStateChange: true)
                	}
                	if(iconType == true){ 
*/			       sendEvent(name: "weatherIcon", value: resp2.data.current_observation.icon, isStateChange: true)
//                	}
//		}
//		if(!sourcelocalSunset){
			sendEvent(name: "localSunset", value: resp2.data.sun_phase.sunset.hour + ":" + resp2.data.sun_phase.sunset.minute, descriptionText: "Sunset today at is $localSunset", isStateChange: true)
//		}
//		if(!sourcelocalSunrise){
			sendEvent(name: "localSunrise", value: resp2.data.sun_phase.sunrise.hour + ":" + resp2.data.sun_phase.sunrise.minute, descriptionText: "Sunrise today is at $localSunrise", isStateChange: true)
//		}
//		if(!sourcemoonPhase){
			sendEvent(name: "moonPhase", value: resp2.data.moon_phase.phaseofMoon , isStateChange: true)
//		}
//		if(!sourcemoonIllumination){
			sendEvent(name: "moonIllumination", value: resp2.data.moon_phase.percentIlluminated  + "%" , isStateChange: true)
//		}
//		if(!sourcesolarradiation){
			def illume = (resp2.data.current_observation.solarradiation)
        		if(illume){
            	 		sendEvent(name: "illuminance", value: resp2.data.current_observation.solarradiation, unit: "lux", isStateChange: true)
                 		sendEvent(name: "solarradiation", value: resp2.data.current_observation.solarradiation, unit: "W", isStateChange: true)
            		}
            		if(!illume){
                 		sendEvent(name: "illuminance", value: "This station does not send Illumination data", isStateChange: true)
            	 		sendEvent(name: "solarradiation", value: "This station does not send Solar Radiation data", isStateChange: true)
            		}
//		}
//		if(!sourcestate){
			sendEvent(name: "state", value: resp2.data.current_observation.display_location.state, isStateChange: true)
//		}
//		if(!sourceUV){
			sendEvent(name: "UV", value: resp2.data.current_observation.UV, isStateChange: true)
//		}
//		sendEvent(name: "stationID", value: resp2.data.station.name, isStateChange: true)
		sendEvent(name: "stationID", value: resp2.data.current_observation.station_id, isStateChange: true)                
        sendEvent(name: "chanceOfRain", value: resp2.data.forecast.simpleforecast.forecastday[0].pop + "%", isStateChange: true)
		sendEvent(name: "percentPrecip", value: resp2.data.forecast.simpleforecast.forecastday[0].pop , isStateChange: true)
		sendEvent(name: "wind_string", value: resp2.data.current_observation.wind_string)
		sendEvent(name: "forecastConditions", value: resp2.data.forecast.simpleforecast.forecastday[0].conditions, isStateChange: true)            
		if(rainFormat == "Inches"){
			sendEvent(name: "precip_1hr", value: resp2.data.current_observation.precip_1hr_in, unit: "IN", isStateChange: true)
			sendEvent(name: "rainTomorrow", value: resp2.data.forecast.simpleforecast.forecastday[1].qpf_allday.in, unit: "IN", isStateChange: true)
			sendEvent(name: "rainDayAfterTomorrow", value: resp2.data.forecast.simpleforecast.forecastday[2].qpf_allday.in, unit: "IN", isStateChange: true)
		}
		if(rainFormat == "Millimetres"){   
			sendEvent(name: "precip_1hr", value: resp2.data.current_observation.precip_1hr_metric, unit: "MM", isStateChange: true)
			sendEvent(name: "rainTomorrow", value: resp2.data.forecast.simpleforecast.forecastday[1].qpf_allday.mm, unit: "MM", isStateChange: true)
			sendEvent(name: "rainDayAfterTomorrow", value: resp2.data.forecast.simpleforecast.forecastday[2].qpf_allday.mm, unit: "MM", isStateChange: true)
		}		
		sendEvent(name: "wuobservation_time", value: resp2.data.current_observation.observation_time, isStateChange: true)
	   	sendEvent(name: "forecastConditions", value: resp2.data.forecast.simpleforecast.forecastday[0].conditions, isStateChange: true)
	   	sendEvent(name: "chanceOfRain", value: resp2.data.forecast.simpleforecast.forecastday[0].pop + "%", isStateChange: true)
	   	sendEvent(name: "percentPrecip", value: resp2.data.forecast.simpleforecast.forecastday[0].pop , isStateChange: true)
//       		sendEvent(name: "weather", value: resp2.data.current_observation.weather, isStateChange: true)
	   	if(tempFormat == "Fahrenheit"){ 
//			if(!sourcefeelsLike){
				sendEvent(name: "feelsLike", value: resp2.data.current_observation.feelslike_f, unit: "F", isStateChange: true)
//			{
			sendEvent(name: "forecastHigh", value: resp2.data.forecast.simpleforecast.forecastday[0].high.fahrenheit, unit: "F", isStateChange: true)
			sendEvent(name: "forecastLow", value: resp2.data.forecast.simpleforecast.forecastday[0].low.fahrenheit, unit: "F", isStateChange: true)
		}
		if(tempFormat == "Celsius"){
//			if(!sourcefeelsLike){
				sendEvent(name: "feelsLike", value: resp2.data.current_observation.feelslike_c, unit: "C", isStateChange: true)
//			{
			sendEvent(name: "forecastHigh", value: resp2.data.forecast.simpleforecast.forecastday[0].high.celsius, unit: "C", isStateChange: true)
			sendEvent(name: "forecastLow", value: resp2.data.forecast.simpleforecast.forecastday[0].low.celsius, unit: "C", isStateChange: true)
		}
		if(distanceFormat == "Miles (mph)"){  
			sendEvent(name: "visibility", value: resp2.data.current_observation.visibility_mi, unit: "mi", isStateChange: true)
		}
		if(distanceFormat == "Kilometres (kph)"){
			sendEvent(name: "visibility", value: resp2.data.current_observation.visibility_km, unit: "km", isStateChange: true)
		}
/*          
		if(summaryType == true){
			if (WeatherSummeryFormat == "Celsius, Miles & MPH"){
		   		sendEvent(name: "weatherSummaryFormat", value: "Celsius, Miles & MPH", isStateChange: true)
				sendEvent(name: "weatherSummary", value: "Weather summary for" + " " + resp1.data.station.name.split(/ /)[0] + ", " + resp1.data.station.name.split(/ /)[1] + " at " + resp1.data.time.time + " " + Date.parse("d/M/yyyy", resp1.data.time.date).format('M/d/yyyy') + ". "  
				+ resp2.data.forecast.simpleforecast.forecastday[0].conditions + " with a high of " + resp2.data.forecast.simpleforecast.forecastday[0].high.celsius + " degrees, " + "and a low of " 
				+ resp2.data.forecast.simpleforecast.forecastday[0].low.celsius  + " degrees. " + "Humidity is currently around " + resp1.data.everything.weather.humidity.current + "% and temperature is " 
				+ resp1.data.everything.weather.temperature.current.c + " degrees. " + " The temperature feels like it's " + resp2.data.current_observation.feelslike_c + " degrees. " 
				+ "Wind is from the " + resp1.data.everything.weather.wind.direction.cardinal
				+ " at " + resp1.data.everything.weather.wind.avg_speed.mph + " mph" + ", with gusts up to: " + resp1.data.everything.weather.wind.max_gust_speed.mph + " mph" + ". Visibility is around " 
				+ resp2.data.current_observation.visibility_mi + " miles" + ". " + "There is a "+resp2.data.forecast.simpleforecast.forecastday[0].pop + "% chance of rain today." , isStateChange: true
				)  
			}
			if (WeatherSummeryFormat == "Fahrenheit, Miles & MPH"){
				sendEvent(name: "weatherSummaryFormat", value: "Fahrenheit, Miles & MPH", isStateChange: true)
				sendEvent(name: "weatherSummary", value: "Weather summary for" + " " + resp1.data.station.name.split(/ /)[0] + ", " + resp1.data.station.name.split(/ /)[1] + " at " + resp1.data.time.time + " " + Date.parse("d/M/yyyy", resp1.data.time.date).format('M/d/yyyy') + ". "  
				+ resp2.data.forecast.simpleforecast.forecastday[0].conditions + " with a high of " + resp2.data.forecast.simpleforecast.forecastday[0].high.fahrenheit + " degrees, " + "and a low of " 
				+ resp2.data.forecast.simpleforecast.forecastday[0].low.fahrenheit  + " degrees. " + "Humidity is currently around " + resp1.data.everything.weather.humidity.current + "% and temperature is " 
				+ resp1.data.everything.weather.temperature.current.f + " degrees. " + " The temperature feels like it's " + resp2.data.current_observation.feelslike_f + " degrees. " 
				+ "Wind is from the " + resp1.data.everything.weather.wind.direction.cardinal
				+ " at " + resp1.data.everything.weather.wind.avg_speed.mph + " mph" + ", with gusts up to: " + resp1.data.everything.weather.wind.max_gust_speed.mph + " mph" + ". Visibility is around " 
				+ resp2.data.current_observation.visibility_mi + " miles" + ". " + "There is a "+resp2.data.forecast.simpleforecast.forecastday[0].pop + "% chance of rain today." , isStateChange: true
				)  
			}   
			 if (WeatherSummeryFormat == "Celsius, Kilometres & KPH"){
				sendEvent(name: "weatherSummaryFormat", value: "Celsius, Kilometres & KPH", isStateChange: true)
				sendEvent(name: "weatherSummary", value: "Weather summary for" + " " + resp1.data.station.name.split(/ /)[0] + ", " + resp1.data.station.name.split(/ /)[1] + " at " + resp1.data.time.time + " " + Date.parse("d/M/yyyy", resp1.data.time.date).format('M/d/yyyy') + ". "  
				+ resp2.data.forecast.simpleforecast.forecastday[0].conditions + " with a high of " + resp2.data.forecast.simpleforecast.forecastday[0].high.celsius + " degrees, " + "and a low of " 
				+ resp2.data.forecast.simpleforecast.forecastday[0].low.celsius  + " degrees. " + "Humidity is currently around " + resp1.data.everything.weather.humidity.current + "% and temperature is " 
				+ resp1.data.everything.weather.temperature.current.c + " degrees. " + " The temperature feels like it's " + resp2.data.current_observation.feelslike_c + " degrees. " 
				+ "Wind is from the " + resp1.data.everything.weather.wind.direction.cardinal
				+ " at " + resp1.data.everything.weather.wind.avg_speed.kmh + " kph" + ", with gusts up to: " + resp1.data.everything.weather.wind.max_gust_speed.kmh + " kph" + ". Visibility is around " 
				+ resp2.data.current_observation.visibility_mi + " miles" + ". " + "There is a "+resp2.data.forecast.simpleforecast.forecastday[0].pop + "% chance of rain today." , isStateChange: true
				)  
			}                
		}    
		if(summaryType == false){
			if (WeatherSummeryFormat == "Celsius, Miles & MPH"){
		 		sendEvent(name: "weatherSummaryFormat", value: "Celsius, Miles & MPH", isStateChange: true)
				sendEvent(name: "weatherSummary", value: resp1.data.everything.forecast.davis_forecast + ". " + " Today's High:" + resp1.data.everything.weather.temperature.current.high.c + ", Today's Low:" 
				+ resp1.data.everything.weather.tempurature.current.low.c  +  ". Humidity: " + resp1.data.everything.weather.current.humidity + "% Temperature: " 
				+ resp1.data.everything.weather.tempurature.current.c  + ". Wind Direction: " + resp1.data.everything.weather.wind.direction.cardinal + ". Wind Speed: " + resp1.data.everything.weather.avg_speed.mph + " mph" 
				+ ", Gust: " + resp1.data.everything.weather.max_gust_speed.mph + " mph.  Rain: "  +resp2.data.forecast.simpleforecast.forecastday[0].pop + "%" , isStateChange: true
				)  
			}
			if (WeatherSummeryFormat == "Fahrenheit, Miles & MPH"){
				sendEvent(name: "weatherSummaryFormat", value: "Fahrenheit, Miles & MPH", isStateChange: true)
				sendEvent(name: "weatherSummary", value: resp1.data.everything.forecast.davis_forecast + ". " + " Today's High:" + resp1.data.everything.weather.temperature.current.high.f + ", Today's Low:" 
				+ resp1.data.everything.weather.tempurature.current.low.f  +  ". Humidity: " + resp1.data.everything.weather.current.humidity + "% Temperature: " 
				+ resp1.data.everything.weather.tempurature.current.f  + ". Wind Direction: " + resp1.data.everything.weather.wind.direction.cardinal + ". Wind Speed: " + resp1.data.everything.weather.avg_speed.mph + " mph" 
				+ ", Gust: " + resp1.data.everything.weather.max_gust_speed.mph + " mph. Rain: "  +resp1.data.forecast.simpleforecast.forecastday[0].pop + "%" , isStateChange: true
				)  
			}
			 if (WeatherSummeryFormat ==  "Celsius, Kilometres & KPH"){
				sendEvent(name: "weatherSummaryFormat", value:  "Celsius, Kilometres & KPH", isStateChange: true)
				sendEvent(name: "weatherSummary", value: resp1.data.everything.forecast.davis_forecast + ". " + " Today's High:" + resp1.data.everything.weather.temperature.current.high.c + ", Today's Low:" 
				+ resp1.data.everything.weather.tempurature.current.low.c  +  ". Humidity: " + resp1.data.everything.weather.current.humidity + "% Temperature: " 
				+ resp1.data.everything.weather.tempurature.current.c  + ". Wind Direction: " + resp1.data.everything.weather.wind.direction.cardinal + ". Wind Speed: " + resp1.data.everything.weather.avg_speed.kmh + " kph" 
				+ ", Gust: " + resp1.data.everything.weather.max_gust_speed.kmh + " kph.  Rain: "  +resp1.data.forecast.simpleforecast.forecastday[0].pop + "%", isStateChange: true
				)  
			}
		}                     
*/            	sendEvent(name: "observation_time", value: resp2.data.current_observation.observation_time, isStateChange: true)
//            	sendEvent(name: "weather", value: resp2.data.current_observation.weather, isStateChange: true)
	    	sendEvent(name: "wind_string", value: resp2.data.current_observation.wind_string)
	       	sendEvent(name: "forecastConditions", value: resp2.data.forecast.simpleforecast.forecastday[0].conditions, isStateChange: true)                        
   
             	def possAlert = (resp2.data.alerts.description)
		if (possAlert){
               		sendEvent(name: "alert", value: resp2.data.alerts.description, isStateChange: true)  
               	}
                if (!possAlert){
               		sendEvent(name: "alert", value: " No current weather alerts for this area")
                }
          	state.wulastPoll = now()     
        
        } 
	}
    catch (e) {
        log.error "something went wrong: $e"
    }
}
def Report(){
  def pwsobvTime = pwsobservation_time.value
  log.info "PWS last updated: $pwsobvTime"
  def wuobvTime = wuobservation_time.value
  log.info "WU last updated: $wuobvTime"
}
